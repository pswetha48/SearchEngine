import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.TreeMap;

public class Main {
	private static TreeMap<Integer, List<String>> indexedQuery = new TreeMap<Integer, List<String>>();

	public static void main(String[] args) {
		Utilities.readFileAndPopulateInvertedList();
		Utilities.readAndPopulateMaxTfDocLen();
		//Utilities.readDocTitle();
		readQuery();
		/*Utilities.query.put(1,"first outbreak of ebola");
		Utilities.query.put(2,"where did first ebola case occur in africa");
		Utilities.query.put(3,"where did first ebola case occur");
		Utilities.query.put(4,"in which places did ebola occur");
		Utilities.query.put(5,"spread of ebola in 2014");
		Utilities.query.put(6,"what was the first hospital to diagnose ebola");
		Utilities.query.put(7,"where was first ebola patient seen");
		Utilities.query.put(8,"where did first ebola case occur in us");
		Utilities.query.put(9,"2014 ebola cases");*/
		printToFile();
	}

	private static void printToFile() {
		Random rand = new Random();

		PrintWriter out = null;
		try {
			out = new PrintWriter(new File("answers.txt"));
			for (int key : Utilities.query.keySet()) {
				System.out.println("Query " + key + ": "
						+ Utilities.query.get(key));
				System.out.println("Indexed form " + ": "
						+ indexedQuery.get(key).toString());
				out.println("----------------WEIGHT 1 SCORES ---------------");
				System.out.format("%3s%30s%30s%20s", "Rank", "Score",
						"ExternalDocumentIdentifier", "Title");
				System.out.println();
				int rank = 1;
				for (double innerKey : Utilities.queryNumWeightOneTopFive.get(key)
						.keySet()) {
					System.out.format(
							"%3s%30s%30s",
							rank++,
							Utilities.queryNumWeightOneTopFive.get(key).get(
									innerKey), innerKey);
					//System.out.print(" -- " + Utilities.docTitle.get(innerKey));
					System.out.println();
				}
				System.out.println();
				out.println("----------------WEIGHT 2 SCORES ---------------");
				System.out.format("%3s%30s%30s%20s", "Rank", "Score",
						"ExternalDocumentIdentifier", "Title");
				System.out.println();
				rank = 1;
				for (double innerKey : Utilities.queryNumWeightTwoTopFive.get(key)
						.keySet()) {
					System.out.format(
							"%3s%28s%30s",
							rank++,
							Utilities.queryNumWeightTwoTopFive.get(key).get(
									innerKey), innerKey);
					//System.out.print(" -- " + Utilities.docTitle.get(innerKey));
					System.out.println();
				}
				System.out.println();
				System.out.println();
				System.out.print("Relevant: ");
				Set<Double> one = Utilities.queryNumWeightOneTopFive.get(key)
						.keySet();
				Set<Double> two = Utilities.queryNumWeightTwoTopFive.get(key)
						.keySet();
				for (double i : one) {
					if (two.contains(i))
						System.out.print(i + ", ");
				}
				System.out.println();
				System.out.print("Irrelevant: ");
				for (double i : one) {
					if (!two.contains(i))
						System.out.print(i + ", ");
				}
				System.out.println();
				System.out.println();
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		out.close();

	}

	private static void readQuery() {
		String fileName = "hw3.queries";
		File input = new File(fileName);
		int count = 0;
		try (BufferedReader br = new BufferedReader(new FileReader(input))) {
			for (String line; (line = br.readLine()) != null;) {
				parseQuery(++count, line);
				Utilities.query.put(count, line);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void parseQuery(int queryNum, String query) {
		/*
		 * what similarity laws must be obeyed when constructing aeroelastic
		 * models of heated high speed aircraft similarity law must obey
		 * construct aeroelastic model heated high speed aircraft
		 */
		List<String> words = new ArrayList<String>();
		String a[] = query.split(" ");
		for (String word : a) {
			word = word.replaceAll("-", " ");
			word = word.toLowerCase().trim();
			if (word != null && !word.isEmpty() && !word.equals("")
					&& !Utilities.isAStopWord(word)
					&& !Utilities.isANumber(word)) {
				word = lemmatize(word);
				words.add(word);
			}
		}
		indexedQuery.put(queryNum, words);
		Utilities.evaluateQuery(queryNum, words);
	}

	private static String lemmatize(String word) {
		word = Lemmatizer.getInstance().getLemma(word);
		word = word.trim();
		if (!word.isEmpty())
			return word;
		return "";
	}

}
